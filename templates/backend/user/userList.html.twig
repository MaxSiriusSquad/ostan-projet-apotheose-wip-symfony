{% extends 'base_backend.html.twig' %}

{% block title %}Administration
{% endblock %}
{% block content %}
    <h1>Les utilisateurs</h1>
    <div class="table-responsive">
        <table id="horizontalScroll" class="table table-striped userTable">
            <thead class="position-sticky">
                <tr>
                    <th scope="col">#Id</th>
                    <th scope="col">Prénom</th>
                    <th scope="col">Nom</th>
                    <th scope="col">Username</th>
                    <th scope="col">CompanyName</th>
                    <th scope="col">Naissance</th>
                    <th scope="col">Email</th>
                    <th scope="col">Address</th>
                    <th scope="col">Téléphone</th>
                    <th scope="col">Inscrit depuis</th>
                    <th scope="col">Jobs</th>
                    <th scope="col">Role</th>
                </tr>
            </thead>
            <tbody>
                {% for user in listUser %}
                    <tr>
                        <th scope="row">{{user.id}}</th>
                        <td>{{user.firstname}}</td>
                        <td>{{user.lastname}}</td>
                        <td>{{user.username}}</td>
                        <td>{{user.companyname}}</td>
                        <td>{{user.birthdate | date('d/m/Y à H:i') }}</td>
                        <td>{{user.email}}</td>
                        <td>{{user.address}}</td>
                        <td>{{user.phonenumber}}</td>
                        <td>{{user.createdAt| date('d/m/Y à H:i')}}</td>
                        <td>
                            {% for job in user.jobs %}
                                {{job.name}}
                            {% endfor %}
                        </td>
                        <td>
                            <div class="form-group">
                                {# onchange : premier paramètre 'this' renvoie l'élément html où il se trouve, donc Select dans notre cas #}
                                {# le deuxième paramètre est généré par twig c'est l'id du user #}
                                    <select class="form-control" id="select_role_{{user.id}}" onchange="handleRoleSelect(this, {{user.id}})"> {% for role in roles %}
                                        {# " ? et : " = Ternaire. Si le code du role du user est == au code du role dans notre boucle, alors affiche selected #}
                                        {# selected affichera directement le role par défaut du user #}
                                            <option value="{{role.id}}" {{user.role.code == role.code ? "selected" : ""}}> {{role.name}}</option>
                                    {% endfor %}
                                </select>
                            </div>
                        </td>
                        <td>
                            {# Pour les paramètres de onclick, si le status du post est == a BLOCKED alors le param = UNBLOCKED #}
                            <button
                                type="button" class="btn btn-warning" onclick="handleStatusButton(this,{{user.id}},{{user.status.code == 'BLOCKED' ? " 'UNBLOCKED' " : " 'BLOCKED' "}})">
                                {# Si le code du status du post est == a BLOCKED alors on ecrit Débloquer dans le bouton #}
                                {{user.status.code == "BLOCKED" ? "Débloquer" : "Bloquer"}}
                            </button>
                            {{ include('backend/user/_delete.html.twig') }}
                        </td>
                    </tr>
                {% endfor %}
            </tbody>
        </table>
    </div>

    <tr>
            <td colspan="2">
                {{ pagination(listUser) }}
            </td>
        </tr>
{% endblock %}
{% block javascripts %}
    <script>
        // On récupère l'url de base du server grâce à window.location
        var baseUrl = window.location.origin;
        // Element = Element html du select que l'on a grâce au 'this' dans le onchange du select.
        // UserId = l'id de l'user envoyé en 2ème paramètre grâce à Twig
        function handleRoleSelect(element, userId) {
            // console.log(element.value); A décommenter si besoin
            // console.log(userId);
            // console.log(window.location)
            // console.log(baseUrl);
            // On utilise ajax pour faire une requête http en mode "rest" donc sans render
            $.ajax({
                method: "PATCH",
                url: baseUrl + "/backend/user/" + userId + "/role/" + element.value,
                // En cas de succès on affiche un toast confirmant le changement de rôle du user.
                success: function (result) {
                    toastr.success('Le rôle de ' + result.firstname + ' a été mis à jour');
                },
                error: function () {
                    toastr.error('Impossible de mettre à jour le rôle, veuillez réessayer.')
                }
            });
        }
        function handleStatusButton(elementButton, userId, statusCode) {
            // console.log(postId);
            // console.log(window.location)
            // console.log(baseUrl);
            // console.log(elementButton);
            // On utilise ajax pour faire une requête http en mode "rest" donc sans render
            $.ajax({
                method: "PATCH",
                url: baseUrl + "/backend/user/" + userId + "/status/" + statusCode,

                // En cas de succès on affiche un toast confirmant le changement de rôle du user.
                success: function (result) {
                    toastr.success('Statut mis à jour');
                    elementButton.textContent = statusCode == "BLOCKED" ? "Débloquer" : "Bloquer";
                    elementButton.onclick = function () {
                        return handleStatusButton(elementButton, userId, statusCode == "BLOCKED" ? "UNBLOCKED" : "BLOCKED")
                    };
                },
                error: function () {
                    toastr.error('Impossible de mettre à jour le statut.')

                }
            });
        }

        $(document).ready(function () {
$('#horizontalScroll').dataTable({
"scrollX": true
});
$('.dataTables_length').addClass('bs-select');
});
    </script>

{% endblock %}
